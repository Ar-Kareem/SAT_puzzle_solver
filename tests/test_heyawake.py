import numpy as np

from puzzle_solver import heyawake_solver as solver
from puzzle_solver.core.utils import get_pos
from puzzle_solver.core.utils_visualizer import id_board_to_wall_board, render_grid, render_shaded_grid

def _viz_board(board: np.array, region_to_clue: dict[str, int]):
    center_char = np.zeros_like(board, dtype=object)
    for y in range(board.shape[0]):
        for x in range(board.shape[1]):
            rid = board[y, x]
            center_char[y, x] = str(region_to_clue[rid]) if rid in region_to_clue else ' '

    print(render_grid(id_board_to_wall_board(board), center_char=center_char))


def test_easy():
    # 6 x 6 easy
    # https://www.puzzle-heyawake.com/?e=MDoxNiwxNDQ=
    board = np.array([
        ['00', '01', '01', '02', '02', '02'],
        ['00', '01', '01', '03', '03', '04'],
        ['05', '05', '06', '03', '03', '04'],
        ['07', '07', '07', '03', '03', '04'],
        ['08', '08', '09', '09', '10', '04'],
        ['08', '08', '11', '11', '10', '04']
    ])
    region_to_clue = {
        '00': 0,
        '06': 0,
        '03': 1,
        '07': 1,
        '08': 2,
        '09': 0,
    }
    binst = solver.Board(board=board, region_to_clue=region_to_clue)
    solutions = binst.solve_and_print()
    assert len(solutions) == 1, f'unique solutions != 1, == {len(solutions)}'
    solution = solutions[0].assignment
    ground = np.array([
        [' ', ' ', ' ', 'B', ' ', ' '],
        [' ', 'B', ' ', ' ', ' ', 'B'],
        ['B', ' ', ' ', 'B', ' ', ' '],
        [' ', ' ', 'B', ' ', ' ', ' '],
        [' ', 'B', ' ', ' ', 'B', ' '],
        ['B', ' ', ' ', 'B', ' ', ' '],
    ])
    ground_assignment = {get_pos(x=x, y=y): 1 if ground[y][x] == 'B' else 0 for x in range(ground.shape[1]) for y in range(ground.shape[0])}
    assert set(solution.keys()) == set(ground_assignment.keys()), f'solution keys != ground assignment keys, {set(solution.keys()) ^ set(ground_assignment.keys())} \n\n\n{solution} \n\n\n{ground_assignment}'
    for pos in solution.keys():
        assert solution[pos] == ground_assignment[pos], f'solution[{pos}] != ground_assignment[{pos}], {solution[pos]} != {ground_assignment[pos]}'


def test_ground():
    # 20 x 20 hard
    # https://www.puzzle-heyawake.com/?e=MTQ6ODQ4LDEzOQ==
    board = np.array([
        ['00', '01', '02', '03', '04', '04', '04', '04', '04', '04', '04', '04', '04', '04', '05', '05', '06', '06', '07', '07'],
        ['00', '08', '02', '03', '09', '09', '10', '10', '10', '11', '11', '12', '12', '12', '05', '05', '06', '06', '07', '07'],
        ['00', '08', '02', '03', '09', '09', '13', '13', '13', '11', '11', '12', '12', '12', '14', '14', '14', '15', '15', '16'],
        ['17', '17', '17', '03', '09', '09', '18', '18', '19', '11', '11', '20', '20', '21', '21', '22', '22', '15', '15', '16'],
        ['17', '17', '17', '23', '23', '23', '23', '23', '19', '11', '11', '24', '24', '21', '21', '25', '25', '25', '25', '26'],
        ['27', '28', '28', '23', '23', '23', '23', '23', '29', '29', '30', '31', '32', '32', '32', '25', '25', '25', '25', '26'],
        ['27', '28', '28', '33', '34', '34', '35', '35', '35', '36', '30', '31', '32', '32', '32', '25', '25', '25', '25', '26'],
        ['27', '28', '28', '33', '34', '34', '35', '35', '35', '37', '37', '31', '32', '32', '32', '25', '25', '25', '25', '38'],
        ['27', '28', '28', '39', '39', '39', '40', '40', '40', '41', '41', '31', '42', '42', '42', '42', '42', '43', '43', '38'],
        ['27', '28', '28', '39', '39', '39', '40', '40', '40', '41', '41', '44', '44', '44', '44', '44', '44', '43', '43', '38'],
        ['27', '45', '45', '39', '39', '39', '46', '46', '47', '41', '41', '44', '44', '44', '44', '44', '44', '48', '48', '48'],
        ['49', '45', '45', '50', '50', '50', '46', '46', '47', '41', '41', '51', '52', '52', '52', '52', '53', '53', '53', '54'],
        ['49', '55', '56', '57', '57', '57', '58', '58', '58', '41', '41', '51', '52', '52', '52', '52', '53', '53', '53', '54'],
        ['49', '55', '59', '57', '57', '57', '58', '58', '58', '60', '60', '61', '61', '62', '62', '63', '63', '63', '63', '54'],
        ['49', '64', '64', '57', '57', '57', '58', '58', '58', '60', '60', '61', '61', '62', '62', '63', '63', '63', '63', '54'],
        ['49', '64', '64', '65', '65', '66', '58', '58', '58', '60', '60', '61', '61', '67', '67', '63', '63', '63', '63', '54'],
        ['49', '64', '64', '65', '65', '66', '58', '58', '58', '60', '60', '61', '61', '67', '67', '68', '68', '69', '70', '54'],
        ['49', '71', '71', '72', '72', '72', '73', '74', '74', '74', '75', '76', '76', '67', '67', '68', '68', '69', '77', '54'],
        ['49', '71', '71', '72', '72', '72', '73', '74', '74', '74', '75', '78', '78', '78', '78', '79', '80', '80', '77', '54'],
        ['81', '81', '81', '81', '81', '81', '81', '82', '82', '82', '75', '83', '83', '83', '83', '79', '80', '80', '77', '54']
    ])
    region_to_clue = {
        '04': 4,
        '09': 0,
        '06': 0,
        '16': 0,
        '13': 2,
        '24': 0,
        '32': 5,
        '27': 3,
        '34': 0,
        '39': 3,
        '37': 0,
        '41': 3,
        '38': 2,
        '43': 0,
        '44': 4,
        '54': 3,
        '53': 2,
        '70': 1,
        '80': 2,
        '67': 1,
        '83': 2,
        '82': 2,
        '73': 0,
        '72': 1,
        '71': 2,
        '64': 1,
        '56': 1,
        '45': 0,
        '57': 2,
        '58': 5,
        '66': 0,
        '60': 3,
        '61': 2,
    }
    # _viz_board(board, region_to_clue)
    binst = solver.Board(board=board, region_to_clue=region_to_clue)
    solutions = binst.solve_and_print()
    assert len(solutions) == 1, f'unique solutions != 1, == {len(solutions)}'
    solution = solutions[0].assignment
    ground = np.array([
        [' ', ' ', 'B', ' ', ' ', 'B', ' ', 'B', ' ', ' ', 'B', ' ', 'B', ' ', ' ', 'B', ' ', ' ', ' ', ' '],
        ['B', ' ', ' ', 'B', ' ', ' ', ' ', ' ', ' ', 'B', ' ', ' ', ' ', ' ', 'B', ' ', ' ', ' ', 'B', ' '],
        [' ', ' ', 'B', ' ', ' ', ' ', 'B', ' ', 'B', ' ', ' ', ' ', 'B', ' ', ' ', 'B', ' ', 'B', ' ', ' '],
        [' ', 'B', ' ', 'B', ' ', ' ', ' ', 'B', ' ', ' ', ' ', 'B', ' ', 'B', ' ', ' ', 'B', ' ', ' ', ' '],
        [' ', ' ', ' ', ' ', 'B', ' ', ' ', ' ', 'B', ' ', 'B', ' ', ' ', ' ', ' ', 'B', ' ', ' ', ' ', 'B'],
        ['B', ' ', ' ', ' ', ' ', 'B', ' ', ' ', ' ', 'B', ' ', ' ', 'B', ' ', 'B', ' ', ' ', ' ', 'B', ' '],
        [' ', ' ', 'B', ' ', ' ', ' ', 'B', ' ', ' ', ' ', 'B', ' ', ' ', 'B', ' ', ' ', 'B', ' ', ' ', ' '],
        ['B', ' ', ' ', 'B', ' ', ' ', ' ', ' ', 'B', ' ', ' ', ' ', 'B', ' ', 'B', ' ', ' ', 'B', ' ', 'B'],
        [' ', ' ', 'B', ' ', 'B', ' ', ' ', 'B', ' ', 'B', ' ', 'B', ' ', ' ', ' ', ' ', 'B', ' ', ' ', ' '],
        [' ', 'B', ' ', ' ', ' ', 'B', ' ', ' ', ' ', ' ', 'B', ' ', ' ', 'B', ' ', 'B', ' ', ' ', ' ', 'B'],
        ['B', ' ', ' ', ' ', 'B', ' ', 'B', ' ', ' ', 'B', ' ', 'B', ' ', ' ', 'B', ' ', ' ', ' ', 'B', ' '],
        [' ', ' ', ' ', 'B', ' ', ' ', ' ', ' ', 'B', ' ', ' ', ' ', 'B', ' ', ' ', 'B', ' ', 'B', ' ', ' '],
        [' ', ' ', 'B', ' ', ' ', 'B', ' ', 'B', ' ', ' ', ' ', 'B', ' ', ' ', ' ', ' ', 'B', ' ', ' ', 'B'],
        [' ', 'B', ' ', ' ', ' ', ' ', 'B', ' ', ' ', 'B', ' ', ' ', ' ', 'B', ' ', ' ', ' ', 'B', ' ', ' '],
        [' ', ' ', 'B', ' ', ' ', 'B', ' ', 'B', ' ', ' ', 'B', ' ', ' ', ' ', 'B', ' ', ' ', ' ', ' ', 'B'],
        ['B', ' ', ' ', ' ', 'B', ' ', ' ', ' ', ' ', 'B', ' ', 'B', ' ', ' ', ' ', 'B', ' ', ' ', ' ', ' '],
        [' ', ' ', ' ', 'B', ' ', ' ', 'B', ' ', 'B', ' ', ' ', ' ', 'B', ' ', ' ', ' ', 'B', ' ', 'B', ' '],
        [' ', ' ', 'B', ' ', ' ', ' ', ' ', 'B', ' ', ' ', ' ', 'B', ' ', 'B', ' ', ' ', ' ', 'B', ' ', ' '],
        [' ', 'B', ' ', ' ', ' ', 'B', ' ', ' ', ' ', ' ', 'B', ' ', ' ', ' ', ' ', ' ', 'B', ' ', ' ', 'B'],
        [' ', ' ', ' ', ' ', 'B', ' ', ' ', 'B', ' ', 'B', ' ', ' ', 'B', ' ', 'B', ' ', ' ', 'B', ' ', ' '],
    ])
    ground_assignment = {get_pos(x=x, y=y): 1 if ground[y][x] == 'B' else 0 for x in range(ground.shape[1]) for y in range(ground.shape[0])}
    assert set(solution.keys()) == set(ground_assignment.keys()), f'solution keys != ground assignment keys, {set(solution.keys()) ^ set(ground_assignment.keys())} \n\n\n{solution} \n\n\n{ground_assignment}'
    for pos in solution.keys():
        assert solution[pos] == ground_assignment[pos], f'solution[{pos}] != ground_assignment[{pos}], {solution[pos]} != {ground_assignment[pos]}'


if __name__ == '__main__':
    test_easy()
    test_ground()
